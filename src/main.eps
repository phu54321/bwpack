/*
여기가 bwpack의 매인 플러그인입니다. main.eps에서는
 - 미사일/유닛의 외형이나 등등을 변경하는 onPluginStart 함수와
 - 매 프레임마다 불리는 afterTriggerExec 함수
 가 있습니다. 

 afterTriggerExec에서는 현재 게임 상황에 따라 여러 함수들을 부릅니다. 
 */


import player.playerProc as pProc;
import player.lifesys as lSys;

import bulletBase as bBase;
import bulletTools as bTool;

import unitloop as uLoop;
import stages.stagesys as sSys;

import bgmplayer;


function setBulletFlingy(flingyID) {
    bwrite(0x6C9E20 + flingyID, 60);  // Maximum turning
    wwrite(0x6C9C78 + 2 * flingyID, 512);  // Maximum acceleration
    dwwrite(0x6C9930 + 4 * flingyID, 1);  // Halt distance to 0
}

function onPluginStart() {
    // 마린 외형/버튼셋
    SetMemory(0x6644F8, SetTo, 0x4B584A0F);  // 마린 그래픽을 0F(저글링)으로
    // SetMemory(0x5187E8, Subtract, 5);   // 마린에게 스팀팩만 남긴다.
    // SetMemory(0x5187EC, Add, 100);  // 마린에게 스팀팩만 남긴다.
    SetMemory(0x51783C, SetTo, 0x00E90009);  // 스팀팩 버튼셋 그래픽 변경
    SetMemory(0x6616E0, Add, 130);  // 마린의 지상무기 삭제
    SetMemory(0x6636B8, Add, 130);  // 마린의 공중무기 삭제
    SetMemory(0x581D76 + 8 * $P11, SetTo, 514);  // P11의 색상을 138로 변경
    SetMemory(0x581D76 + 8 * $P11 + 4, SetTo, 0);

    setBulletFlingy(43);  // 스카웃 속도 조절

    // 라이프 시스템 초기화
    lSys.setLife($Force1, 20);
    LeaderBoardResources(Ore, "\x04Remaining life");
    LeaderBoardComputerPlayers(Disable);

    // 스테이지 관련
    SetCurrentPlayer(getuserplayerid());
    DisplayText("\x1F♬\x04 cycerin - Spacefighter\n\n");
}

var x = 0;
var timer = 0;
var gameEnded = 0;

function issueGameComplete() {
    gameEnded = 1;
}

// victoryProc를 밑에서 정의해주니까 여기서는 victoryProc라는게 있다고만 선언해줍니다.
function victoryProc();


// 메인 함수입니다.
function afterTriggerExec() {
    bgmplayer.bgmloop();  // 브금 재생


    if(gameEnded) return;
    else if(Accumulate(Force1, Exactly, 0, Ore)) {  // 패배처리
        // Defeat는 lifesys에서 해줬을테니까 여기선 issueGameComplete만 한다.
        issueGameComplete();
        return;
    }

    // 게임 클리어 처리
    if(sSys.isGameCompleted) {
        victoryProc();
        return;
    }

    sSys.runStageProc();  // 현재 스테이지에 따른 미사일 발사
    uLoop.mainUnitLoop();  // 구조오프셋 관련 처리
    lSys.lifeProc();  // 미사일에 맞는것 등 처리

    // pTrace 관련
    SetCurrentPlayer(getuserplayerid());
    MoveLocation('pTrace', 'Avoider', CurrentPlayer, 'Anywhere');  // 카메라

    // 기타 처리
    SetInvincibility(Enable, '(any unit)', AllPlayers, 'Anywhere');
    ModifyUnitHitPoints(All, '(any unit)', AllPlayers, 'Anywhere', 100);
    MinimapPing('minimapPing');  // 미니맵 업데이트
    SetMemory(0x6D5E1C, SetTo, 1);  // 화면 업데이트용
}


////

var victoryTimer = 0;
function victoryProc() {
    SetCurrentPlayer(getuserplayerid());

    if(victoryTimer == 24 * 0) {
        DisplayText(SCMD2Text("\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
<0F>[[ <04>Cleared! <0F>]]\n\
\n\
 - Inspired by\n\
\t<04>Ikaruga[<05>斑鳩<04>]\n\
\t<04>Bullet maze\n\
"));
    }

    else if(victoryTimer == 24 * 5) {
        DisplayText(SCMD2Text("\n\
\n\
\n\
\n\
\n\
\n\
\n\
<0F>[[ <04>Cleared! <0F>]]\n\
\n\
 - Created with\n\
\t<04>scmdraft2\t <1D>Terrain, units, etc\n\
\t<04>epScript\t <1D>Trigger system\n\
\t<04>euddraft\t <1D>eudplib project\n\
"));
    }

    else if(victoryTimer == 24 * 10) {
        DisplayText(SCMD2Text("\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
<0F>[[ <04>Cleared! <0F>]]\n\
\n\
 - Special thanks to\n\
\t<04>EDAC\t\t <1D>http://cafe.naver.com/edac\n\
\t<06>M<1C>W\t\t\t <1D>http://cafe.naver.com/missilewarface\n\
"));
    }

    else if(victoryTimer == 24 * 15) {
        DisplayText(SCMD2Text("\
\n\
\n\
\n\
\n\
\n\
\n\
<0F>[[ <04>Cleared! <0F>]]\n\
\n\
 - <01>This map is <04>OPEN SOURCED  <06>!\n\
\t<04>Main\t\t <1D>https://github.com/phu54321/bwpack/\n\
\t<04>epScript\t <05>https://github.com/phu54321/epScript/\n\
\t<04>euddraft\t <05>https://github.com/phu54321/euddraft/\n\
"));
    }

    else if(victoryTimer == 24 * 20) {
        issueGameComplete();
        Victory();
    }

    victoryTimer++;
}
